---
import { projectsData } from '../data/ProjectsData';

const featuredProjects = projectsData.filter(project => project.isFeatured);
---

<section id="featured-works" class="py-20 bg-gray-50">
  <div class="container mx-auto px-8">
    <h2 class="text-3xl font-bold text-center mb-12">Featured Works</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 lg:gap-10" id="featured-works-grid">
      {featuredProjects.map((project) => (
        <article
          class="featured-work-item bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 border border-purple-200" >
          <div class="project-image-container relative"> {/* New container for image and overlay */}
            <a href={`/${project.slug}`}>
              <img
                src={project.imageSrc}
                alt={project.imageAlt}
                loading="lazy"
                class="w-full h-auto sm:h-96 object-cover block rounded-t-lg"
              />
            </a>
            <div class="project-overlay absolute inset-0 bg-gradient-to-t from-black to-transparent rounded-t-lg"></div> {/* Gradient overlay */}
            <div class="project-text absolute bottom-0 left-0 p-6 text-white"> {/* Text container, positioned at bottom */}
              <h3 class="text-3xl font-semibold mb-2">{project.title}</h3>
              <a href={`/${project.slug}`} class="inline-block mt-3 hover:text-burple-200 hover:underline font-semibold transition-colors duration-200 text-white"
                >View Project <span class="arrow-icon">â†’</span></a
              >
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const featuredWorksGrid = document.getElementById('featured-works-grid');
    const isMobile = window.innerWidth < 768; // Detect mobile devices

    if (!isMobile) {
      // Throttling function (from your original index.js)
      function throttle(func, delay) {
        let lastCall = 0;
        return function (...args) {
          const now = new Date().getTime();
          if (now - lastCall >= delay) {
            lastCall = now;
            return func.apply(this, args);
          }
        };
      }

      // Apply 3D hover effect to each featured work item
      document.querySelectorAll('.featured-work-item').forEach((item) => {
        const img = item.querySelector('img');

        const handleMouseMove = throttle((e) => {
          const rect = item.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;

          const rotateX = ((y - centerY) / centerY) * 20;
          const rotateY = ((centerX - x) / centerX) * 20;

          requestAnimationFrame(() => {
            item.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) perspective(1000px)`; // Added perspective here
            img.style.transform = `rotateX(${rotateX / 2}deg) rotateY(${rotateY / 2}deg) scale(1.05)`; // Slight scale up
          });
        }, 20);

        item.addEventListener('mousemove', handleMouseMove);

        item.addEventListener('mouseleave', () => {
          requestAnimationFrame(() => {
            item.style.transform = 'rotateX(0deg) rotateY(0deg) perspective(1000px)'; // Reset perspective on mouse leave too
            img.style.transform = 'scale(1) rotateX(0deg) rotateY(0deg)';
          });
        });
      });
    }
  });
</script>

<style>
  /* Arrow icon style (kept from CSS, adjust if needed) */
  .arrow-icon {
    display: inline-block;
    transition: transform 0.2s ease-in-out;
  }

  .featured-work-item a:hover .arrow-icon {
    transform: translateX(4px); /* Animate arrow on link hover */
  }

  .project-image-container {
   position: relative; /* To contain absolute positioned elements */
  }

  .project-overlay {
   pointer-events: none; /* Make sure the overlay doesn't block clicks */
  }

  .project-text {
   position: absolute;
   bottom: 0;
   left: 0;
   padding: 1.5rem; /* Equivalent to p-6 */
   color: white; /* Ensure text is white for visibility on gradient */
  }
</style>